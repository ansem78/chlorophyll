@use '../helpers';
@use './animations';

@if helpers.module-enabled('animate') {

  $animate-repeat: helpers.get-config('animate-repeat');
  $animate-delay: helpers.get-config('animate-delay');
  $animate-duration: helpers.get-config('animate-duration');
  $durations: helpers.get-config('animate-durations');

  .animate {
    animation-iteration-count: $animate-repeat;
    animation-delay: $animate-delay;
    animation-duration: $animate-duration;
    animation-fill-mode: both;
    animation-direction: normal;
    animation-play-state: running;
  }

  .animate-normal {
    animation-direction: normal;
  }

  .animate-reverse {
    animation-direction: reverse;
  }

  .animate-alternate {
    animation-direction: alternate;
  }

  .animate-alternate-reverse {
    animation-direction: alternate-reverse;
  }

  .animate-play {
    animation-play-state: running;
  }

  .animate-pause {
    animation-play-state: paused;
  }

  .animate-infinite {
    animation-iteration-count: infinite;
  }

  @for $n from 1 through 5 {

    .animate-repeat-#{$n} {
      animation-iteration-count: #{$animate-repeat * $n};
    }

  }

  @for $n from 1 through 3 {

    .animate-delay-#{$n} {
      animation-delay: #{$animate-delay * $n};
    }

  }

  @each $key, $duration in $durations {

    .animate-time-#{$key} {
      animation-duration: $duration;
    }

  }

  @media print, (prefers-reduced-motion: reduce) {

    .animate {
      animation-duration: 1ms !important;
      transition-duration: 1ms !important;
      animation-iteration-count: 1 !important;
    }

    .animate[class*=out] {
      opacity: 0;
    }

  }

}
