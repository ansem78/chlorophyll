@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use '../config';
@use '../custom-config';

$config: map.deep-merge(meta.module-variables('config'), meta.module-variables('custom-config'));

// Check if a variable exists in the configuration and return it.
// Otherwise, return null.
@function get-config($var) {
  @return map.get($config, $var);
}

// Check if a module is enabled.
// You can either pass a top level module name as `module` or a submodule name as `module/submodule`.
// If you only pass a module name, check if it's enable or if at least one of its submodules is enabled.
// If you pass a submodule, check if it exists into the given module and if it's enabled.
@function module-enabled($module) {
  $modules: get-config('modules');
  $submodule: null;
  $separator: string.index($module, '/');
  @if $separator {
    $submodule: string.slice($module, $separator + 1);
    $module: string.slice($module, 1, $separator - 1);
  }
  $value: map.get($modules, $module);
  // $submodule is passed, but $module is not a map (has no submodules): return false.
  @if meta.type-of($value)!='map' and $submodule {
    @return false;
  }
  // Module value is a map: there are submodules.
  @if meta.type-of($value)=='map' {
    // $submodule is passed: check if it is enabled.
    @if $submodule {
      @return if(map.get($value, $submodule), true, false);
    }
    // $submodule is not passed: check if at least one of submodule is enabled.
    @else {
      @each $v in $value {
        @if $v {
          @return true;
        }
      }
      @return false;
    }
  }
  // Value is flat (tipically a boolean): evaluate as boolean.
  @return if($value, true, false);
}

// Remove the unit from a length.
@function strip-unit($length) {
  @if meta.type-of($length)=='number' and not math.is-unitless($length) {
    @return $length / ($length * 0 + 1);
  }
  @return $length;
}

// Get the unit from a length.
// If the passed value is not a length, return null.
// The built-in function math.unit() is intended for debug and its implementation is inconsistent.
// https://sass-lang.com/documentation/modules/math#unit
@function get-unit($length) {
  @if meta.type-of($length)=='number' and not math.is-unitless($length) {
    $unit: string.slice($length * 0 + '', 2);
    @return if($unit!='', $unit, null);
  }
  @return null;
}

// Given a list containing 2-values lists, revert each sublist values.
// Ignore any sublist that has 2 equal values.
@function reverse-lists($list) {
  $reversed: ();
  @each $value in $list {
    $value1: list.nth($value, 1);
    $value2: list.nth($value, 2);
    @if $value1!=$value2 {
      $reversed: list.append($reversed, ($value2, $value1));
    }
  }
  @return $reversed;
}
