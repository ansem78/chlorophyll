// Ascending.
// Used to evaluate Sass maps like breakpoints.
@mixin assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num==null or unit($num)=='%' or unit($prev-num)=='%' {
      // Do nothing.
    }
    @else if not comparable($prev-num, $num) {
      @warn 'Potentially invalid value for #{$map-name}. This map must be in ascending order, but key `#{$key}` has value #{$num}. This unit makes it incomparable to #{$prev-num}, the value of the previous key `#{$prev-key}`.';
    }
    @else if $prev-num>=$num {
      @warn 'Invalid value for #{$map-name}. This map must be in ascending order. The key `#{$key}` has value #{$num}, which is not greater than the value of the previous key `#{$prev-key}` (#{$prev-num}).';
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero.
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin assert-starts-at-zero($map, $map-name) {
  @if length($map)>0 {
    $values: map-values($map);
    $first: nth($values, 1);
    @if $first!=0 {
      @warn 'First breakpoint in #{$map-name} starts at #{$first}, but it must start at 0.';
    }
  }
}

// Remove the unit of a length.
@function strip-unit($number) {
  @if type-of($number)=='number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// $weight must be a number between 0% and 100% (inclusive).
// A larger weight indicates that more of $color1 should be used.
// A smaller weight indicates that more of $color2 should be used.

// Return opaque color.
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function color-opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100);
}

// Tint a color: mix a color with white.
@function color-tint($color, $weight: 50%) {
  @return mix(#fff, $color, $weight);
}

// Shade a color: mix a color with black.
@function color-shade($color, $weight: 50%) {
  @return mix(#000, $color, $weight);
}

// Shade the color if the weight is positive, else tint it.
@function color-shift($color, $weight: 50%) {
  @return if($weight>0, color-shade($color, $weight), color-tint($color, -$weight));
}

// Turn any value in the given map to negative.
@function negativify-map($map) {
  $negative-map: ();
  @each $key, $value in $map {
    @if $key!=0 and $value!=0 {
      $negative-map: map-merge($negative-map, ('-#{$key}': -$value));
    }
  }
  @return $negative-map;
}

// Reverse values in any 2-values list in the given map.
@function reverse-lists($list) {
  $reversed-lists: ();
  @each $value in $list {
    $value1: nth($value, 1);
    $value2: nth($value, 2);
    @if $value1!=$value2 {
      $reversed-lists: append($reversed-lists, ($value2, $value1));
    }
  }
  @return $reversed-lists;
}
